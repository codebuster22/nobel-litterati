{"version":3,"sources":["App.js","getWeb3.js","serviceWorker.js","index.js"],"names":["ipfs","ipfsClient","App","state","isLoaded","litters","refresh","currentAccount","componentDidMount","a","getWeb3","web3","gas","gasPrice","utils","toWei","console","log","eth","getAccounts","accounts","setInterval","setState","fetchUserStats","net","getId","networkId","OpenNFTNetwork","OpenNFTContract","networks","OpenNFTInstance","Contract","abi","address","NodeMainNetwork","NobelMainContract","NodeMainInstance","fetchTokenIds","initialiseNobelTokenContract","listenToNftCreation","alert","error","giftReward","creator","NobelTokenInstance","methods","balanceOf","call","balance","transfer","send","from","on","receipt","getNobelsContractAddress","NobelTokenAddress","NobelTokenContract","tokenId","CurrentTokenId","i","getTokenUri","tokenUri","getTokenCreator","getTokenCaption","caption","unshift","events","NftTokenCreated","returnValues","litter","account","getBalanceOfLitter","litterBalance","getBalanceOfNobels","nobelBalance","postLitterOnContract","uri","createNobelLitter","response","this","className","UserStats","userAddress","totalLitters","PostLitter","ViewLitters","Component","style","wordBreak","useState","imageLoaded","setImageLoaded","file","setFile","previewImage","setPreviewImage","setCaption","postingState","setPostingState","handleInputFile","event","target","files","URL","createObjectURL","options","maxSizeMB","imageCompression","compressedFile","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","result","handleDestroyLitter","add","path","type","onChange","placeholder","id","htmlFor","value","src","alt","onClick","map","LitterCard","key","renderLitters","isGifting","setIsGifting","giveReward","width","Promise","resolve","reject","addEventListener","ethereum","Web3","enable","provider","providers","HttpProvider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.719d79d4.chunk.js","sourcesContent":["import React, { Component, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport OpenNFTContract from \"./contracts/OpenNFT.json\";\r\nimport NobelMainContract from \"./contracts/NobelMain.json\";\r\nimport NobelTokenContract from \"./contracts/NobelToken.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport Web3 from 'web3';\r\nimport imageCompression from 'browser-image-compression';\r\n\r\nimport ipfsClient from 'ipfs-http-client';\r\nconst ipfs = ipfsClient('https://ipfs.infura.io:5001');\r\n\r\n\r\n\r\nclass App extends Component {\r\n  state = { isLoaded: false, litters: [], refresh: false, currentAccount: '0x00000000000000000000' };\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      this.web3 = await getWeb3();\r\n      // this.web3 = await new Web3(\"https://rinkeby.infura.io/v3/ca2f217cd62c4f8081cbfa6f236b609a\");\r\n\r\n      this.gas = 3000000;\r\n      this.gasPrice = this.web3.utils.toWei('2','Gwei');\r\n      console.log(this.gasPrice);\r\n\r\n      // Use web3 to get the user's accounts.\r\n      this.accounts = await this.web3.eth.getAccounts();\r\n      setInterval(\r\n        async ()=>{\r\n          this.accounts = await this.web3.eth.getAccounts();\r\n          if(this.state.currentAccount !== this.accounts[0]){\r\n            this.setState({currentAccount: this.accounts[0]});\r\n          }\r\n          this.fetchUserStats(this.accounts[0]);\r\n        }, 1000\r\n      )\r\n\r\n      // Get the contract instance.\r\n      this.networkId = await this.web3.eth.net.getId();\r\n\r\n      const OpenNFTNetwork = OpenNFTContract.networks[this.networkId];\r\n      this.OpenNFTInstance = new this.web3.eth.Contract(\r\n        OpenNFTContract.abi,\r\n        OpenNFTNetwork && OpenNFTNetwork.address,\r\n      );\r\n\r\n      const NodeMainNetwork = NobelMainContract.networks[this.networkId];\r\n      this.NodeMainInstance = new this.web3.eth.Contract(\r\n        NobelMainContract.abi,\r\n        NodeMainNetwork && NodeMainNetwork.address,\r\n      );\r\n\r\n      this.fetchUserStats(this.accounts[0]);\r\n\r\n      this.fetchTokenIds();\r\n\r\n      this.initialiseNobelTokenContract();\r\n\r\n      this.listenToNftCreation();\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      if(this.web3){\r\n        this.setState({ isLoaded: true, currentAccount: this.accounts[0]});\r\n      }\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  giftReward = async (creator) => {\r\n    const currentAccount = this.state.currentAccount;\r\n    const balance = await this.NobelTokenInstance.methods.balanceOf(this.state.currentAccount).call();\r\n    console.log(balance);\r\n    if(balance<1){\r\n      alert(\"Sorry, you don't have enough Nobel Token Balance. Earn Nobel tokens by destroying some Litter.\");\r\n      return;\r\n    }\r\n    return await this.NobelTokenInstance.methods.transfer(creator, 1).send({\r\n      from: currentAccount,\r\n      gas: this.gas,\r\n      gasPrice: this.gasPrice\r\n    }).on('receipt',(receipt)=>true)\r\n      .on('error', (error)=>false);\r\n  }\r\n\r\n  initialiseNobelTokenContract = async () => {\r\n    const NobelTokenAddress = await this.NodeMainInstance.methods.getNobelsContractAddress().call();\r\n    console.log({NobelTokenAddress});\r\n      this.NobelTokenInstance = new this.web3.eth.Contract(\r\n        NobelTokenContract.abi,\r\n        NobelTokenAddress\r\n      );\r\n  }\r\n\r\n  fetchTokenIds = async () => {\r\n    const litters = this.state.litters;\r\n    const CurrentTokenId = await this.OpenNFTInstance.methods.tokenId().call();\r\n    for(let i = 1; i<=CurrentTokenId; i++){\r\n      const tokenUri = await this.OpenNFTInstance.methods.getTokenUri(i).call();\r\n      const creator = await this.OpenNFTInstance.methods.getTokenCreator(i).call();\r\n      const caption = await this.OpenNFTInstance.methods.getTokenCaption(i).call();\r\n      const tokenId = i;\r\n      litters.unshift({tokenUri, tokenId, creator, caption });\r\n    };\r\n    this.setState({litters: litters});\r\n  }\r\n\r\n  listenToNftCreation = async () => {\r\n    this.OpenNFTInstance.events.NftTokenCreated()\r\n            .on('data',\r\n                  (receipt)=>{\r\n                    const {creator, tokenId, tokenUri, caption} = receipt.returnValues\r\n                    const litter = {creator, tokenId, tokenUri, caption};\r\n                    const litters = this.state.litters;\r\n                    litters.unshift(litter);\r\n                    this.setState({litters: litters});\r\n                  }\r\n              )\r\n  }\r\n\r\n  fetchUserStats = async (account) => {\r\n    const litterBalance = await this.NodeMainInstance\r\n                          .methods.getBalanceOfLitter(account).call();\r\n    const nobelBalance = await this.NodeMainInstance\r\n                          .methods.getBalanceOfNobels(account).call();\r\n    this.setState({\r\n      litterBalance: litterBalance,\r\n      nobelBalance: nobelBalance\r\n    })\r\n  }\r\n\r\n  postLitterOnContract = async (uri, caption) => {\r\n    const currentAccount = this.state.currentAccount;\r\n    const response = await this.NodeMainInstance.methods\r\n                  .createNobelLitter(uri, caption).send({\r\n                    from: currentAccount,\r\n                    gas: this.gas,\r\n                    gasPrice: this.gasPrice\r\n                  }).on('error',(error)=>{\r\n                              alert(\"Litter Already Exists\"); \r\n                              return false;\r\n                            });\r\n    console.log(response);\r\n    await this.fetchUserStats(this.state.currentAccount);\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    if (!this.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n    return (\r\n      <div className=\"App container\">\r\n        <div className={'row'}>\r\n          <UserStats \r\n              userAddress={this.state.currentAccount} \r\n              totalLitters={this.state.litterBalance} \r\n              nobelBalance={this.state.nobelBalance} \r\n              />\r\n        </div>\r\n        <div className={'row'}>\r\n          <PostLitter postLitterOnContract={this.postLitterOnContract} />\r\n          <ViewLitters litters={this.state.litters} giftReward={this.giftReward} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\nconst UserStats = ({userAddress, totalLitters, nobelBalance}) => {\r\n\r\n\r\n  return (\r\n        <div className={'user-stats col-12 d-flex flex-wrap justify-content-around'}>\r\n            <p className={'h5'} style={{wordBreak: 'break-all'}} >\r\n              User Address:- {userAddress}\r\n            </p>\r\n            <p className={'h5'} style={{wordBreak: 'break-all'}} >\r\n            Total Litters Sumbitted:- {totalLitters}\r\n            </p>\r\n            <p className={'h5'} style={{wordBreak: 'break-all'}} >\r\n            Nobel Balance:- {nobelBalance}\r\n            </p>\r\n        </div>\r\n  )\r\n\r\n\r\n}\r\n\r\nconst PostLitter = ({postLitterOnContract}) => {\r\n\r\n  const DESTROY_LITTER = \"Destroy Litter!\";\r\n  const SORTING = \"Sorting....\";\r\n  const DESTROYING = \"Destroying....\";\r\n\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n  const [file, setFile] = useState();\r\n  const [previewImage, setPreviewImage] = useState();\r\n  const [caption, setCaption] = useState();\r\n  const [postingState, setPostingState] = useState(DESTROY_LITTER)\r\n\r\n  const handleCaptionChange = (event) => {\r\n    if(event.target.value!==null){\r\n      setCaption(event.target.value);\r\n    }\r\n  }\r\n\r\n  const handleInputFile = async  (event) => {\r\n    if( event.target.files && event.target.files[0] ){\r\n      const file = event.target.files[0];\r\n      setPreviewImage(URL.createObjectURL(file));\r\n      setImageLoaded(true);\r\n      setPostingState(SORTING);\r\n      const options = {\r\n          maxSizeMB: 0.25\r\n      };\r\n      const compressedFile = await imageCompression(file, options);\r\n      console.log(compressedFile);\r\n      const reader = new window.FileReader();\r\n      reader.readAsArrayBuffer(compressedFile);\r\n      reader.onloadend = () => {\r\n        setPostingState(DESTROY_LITTER);\r\n        setFile(Buffer(reader.result));\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleDestroyLitter = async () => {\r\n    if(postingState!==DESTROY_LITTER) return;\r\n    if(file===null) return;\r\n    setPostingState(DESTROYING)\r\n    console.log(file);\r\n    const result = await ipfs.add(file);\r\n    console.log(result);\r\n    const flag = await postLitterOnContract(\r\n                                        result.path, caption || 'Awesome'\r\n                                        )\r\n    if(!flag) { alert(\"Destroying Failed\"); return; }\r\n    alert(\"Destroyed Successfully\");\r\n    setPostingState(DESTROY_LITTER);\r\n  }\r\n\r\n\r\n  return (\r\n          <div className={'col-12 col-md-6 post-litter'} >\r\n            <form >\r\n              <div className={'custom-file mt-5 mb-3'}>\r\n                <input \r\n                    type={'file'} \r\n                    onChange={handleInputFile}\r\n                    placeholder={\"Upload the litter\"} \r\n                    className={'upload-litter custom-file-input'} \r\n                    id={'customFile'} \r\n                  />\r\n                <label \r\n                    className={'custom-file-label'}\r\n                    htmlFor={'customFile'}\r\n                    >\r\n                      Pick Up Litter...\r\n                  </label>\r\n              </div>\r\n              <div className={\"form-group mt-1 mb-3\"}>\r\n                <label htmlFor=\"exampleFormControlInput1\">Something About Litter</label>\r\n                <input type={\"text\"} onChange={handleCaptionChange} value={caption} className={\"form-control\"} id={\"exampleFormControlInput1\"} placeholder={\"Worst\"} />\r\n              </div>\r\n              {\r\n                imageLoaded?\r\n                    <div className={'litter-preview-container mt-3 mb-3 p-2'}>\r\n                      <img src={previewImage} alt={'litter-preview'} className={'LitterPreview'} />\r\n                    </div>\r\n                    :\r\n                    <></>\r\n              }\r\n              <div>\r\n                <button type={'button'} onClick={handleDestroyLitter} className={'btn btn-danger mt-3 mb-3'} >\r\n                  {postingState}\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n  )\r\n\r\n\r\n}\r\n\r\n\r\nconst ViewLitters = ({litters, giftReward}) => {\r\n\r\n  const renderLitters = (litters) =>\r\n        litters.map(\r\n            litter => <LitterCard litter={litter} key={litter.tokenId} giftReward={giftReward} />\r\n          )\r\n\r\n  return (\r\n          <div className={'col-12 col-md-6 pt-5 view-litters'} >\r\n            <h2>\r\n              Litters by the community\r\n            </h2>\r\n            <div className={'mt-5 mb-5 p-2'}>\r\n                {renderLitters(litters)}\r\n            </div>\r\n          </div>\r\n  )\r\n\r\n}\r\n\r\nconst LitterCard = ({litter, giftReward}) => {\r\n\r\n  const [isGifting, setIsGifting] = useState(false);\r\n\r\n  const giveReward = async () => {\r\n    setIsGifting(true);\r\n    alert(`Are you sure you want to gift ${litter.creator}, 1 Nobel Token`);\r\n    const flag = await giftReward(litter.creator);\r\n    if(!flag){\r\n      alert(\"Sending Reward Failed\");\r\n      return;\r\n    }\r\n    alert(\"Sent\");\r\n    setIsGifting(false)\r\n  }\r\n\r\n  return (\r\n          <div className={'w-100 d-flex justify-content-center'}>\r\n            <div className={\"card mt-2 mb-2\"} style={{width: '20rem'}}>\r\n                  <img src={`https://ipfs.infura.io/ipfs/${litter.tokenUri}`} className=\"card-img-top\" alt=\"...\" />\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{litter.creator}</h5>\r\n                    <p className=\"card-body\">{litter.caption}</p>\r\n                    <button type={'button'} className=\"btn btn-primary\" onClick={giveReward} >\r\n                      {\r\n                        isGifting?\r\n                          \"Sending....\"\r\n                          :\r\n                          \"Give 1 Nobel Token as Reward\"\r\n                      }\r\n                    </button>\r\n                  </div>\r\n            </div>\r\n          </div>\r\n  )\r\n\r\n\r\n}","import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}