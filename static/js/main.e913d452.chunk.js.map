{"version":3,"sources":["Components/PostLitter.jsx","getWeb3.js","Components/ProfileImageIcon.jsx","Components/UserStats.jsx","UserStatsContext.js","Components/Footer.jsx","Components/ProfileMenu.jsx","Components/ViewLitters.jsx","Components/RegisterUserModal.jsx","Components/TopBar.jsx","App.js","serviceWorker.js","index.js"],"names":["ipfs","ipfsClient","PostLitter","postLitterOnContract","DESTROY_LITTER","isRegistered","useState","imageLoaded","setImageLoaded","file","setFile","previewImage","setPreviewImage","caption","setCaption","postingState","setPostingState","handleInputFile","event","a","target","files","URL","createObjectURL","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","result","handleDestroyLitter","console","log","add","path","alert","className","type","onChange","placeholder","id","htmlFor","value","src","alt","onClick","getWeb3","Promise","resolve","reject","addEventListener","ethereum","web3","Web3","enable","provider","providers","HttpProvider","ProfileImageIcon","icon","faUser","UserStats","userName","userAddress","totalLitters","nobelBalance","ch1","cd1","ch2","cd2","UserName","props","style","wordBreak","children","UserAddress","Balance","defaultValue","UserStatsContext","createContext","CLIENT","process","REACT_APP_REPOSITORY_URL","Footer","faHeart","href","rel","ProfileMenu","closeMenu","useContext","MenuContext","currentAccount","litterBalance","faTimes","ViewLitters","litters","giftReward","map","litter","key","tokenId","renderLitters","LitterCard","isGifting","setIsGifting","giveReward","creator","width","tokenUri","creatorName","RegisterUserModal","show","onHide","register","isRegistering","setIsRegistering","setUserName","registerUser","Modal","size","aria-labelledby","centered","Header","closeButton","Title","Body","e","TopBar","toggleMenu","faBars","App","state","isLoaded","refresh","componentDidMount","gas","gasPrice","utils","toWei","eth","getAccounts","accounts","setInterval","changeUser","fetchUserStats","net","getId","networkId","OpenNFTNetwork","OpenNFTContract","networks","OpenNFTInstance","Contract","abi","address","NodeMainNetwork","NobelMainContract","NodeMainInstance","fetchTokenIds","initialiseNobelTokenContract","listenToNftCreation","setState","error","onShow","methods","send","from","on","receipt","account","call","newState","NobelTokenInstance","balanceOf","balance","transfer","getNobelsContractAddress","NobelTokenAddress","NobelTokenContract","CurrentTokenId","i","getTokenUri","getTokenCreator","getTokenCaption","user_address_to_user_name","unshift","events","NftTokenCreated","returnValues","this","getBalanceOfLitter","getBalanceOfNobels","uri","createNobelLitter","response","userStats","Provider","MenuComponent","direction","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e913d452.chunk.js","sourcesContent":["/*\r\n  Form to upload litter image and destroy it.\r\n */\r\n\r\nimport React, {useState} from 'react';\r\nimport ipfsClient from 'ipfs-http-client';\r\nconst ipfs = ipfsClient('https://ipfs.infura.io:5001');\r\n\r\nconst PostLitter = ({postLitterOnContract, isRegistered}) => {\r\n\r\n    const DESTROY_LITTER = \"Destroy Litter!\";\r\n    const SORTING = \"Sorting....\";\r\n    const DESTROYING = \"Destroying....\";\r\n  \r\n    const [imageLoaded, setImageLoaded] = useState(false);\r\n    const [file, setFile] = useState();\r\n    const [previewImage, setPreviewImage] = useState();\r\n    const [caption, setCaption] = useState();\r\n    const [postingState, setPostingState] = useState(DESTROY_LITTER)\r\n  \r\n    const handleCaptionChange = (event) => {\r\n      if(event.target.value!==null){\r\n        setCaption(event.target.value);\r\n      }\r\n    }\r\n  \r\n    const handleInputFile = async  (event) => {\r\n      if( event.target.files && event.target.files[0] ){\r\n        const file = event.target.files[0];\r\n        setPreviewImage(URL.createObjectURL(file));\r\n        setImageLoaded(true);\r\n        setPostingState(SORTING);\r\n        const reader = new window.FileReader();\r\n        reader.readAsArrayBuffer(file);\r\n        reader.onloadend = () => {\r\n          setPostingState(DESTROY_LITTER);\r\n          setFile(Buffer(reader.result));\r\n        }\r\n      }\r\n    }\r\n  \r\n    const handleDestroyLitter = async () => {\r\n      if(postingState!==DESTROY_LITTER) return;\r\n      if(file===null) return;\r\n      setPostingState(DESTROYING)\r\n      console.log(file);\r\n      const result = await ipfs.add(file);\r\n      console.log(result);\r\n      const flag = await postLitterOnContract(\r\n                                          result.path, caption || 'Awesome'\r\n                                          )\r\n      if(!flag) { alert(\"Destroying Failed\"); return; }\r\n      alert(\"Destroyed Successfully\");\r\n      setPostingState(DESTROY_LITTER);\r\n    }\r\n  \r\n  \r\n    return (\r\n            <div className={'col-12 col-md-6 post-litter'} >\r\n              <form >\r\n                <div className={'custom-file mt-5 mb-3'}>\r\n                  <input \r\n                      type={'file'} \r\n                      onChange={handleInputFile}\r\n                      placeholder={\"Upload the litter\"} \r\n                      className={'upload-litter custom-file-input'} \r\n                      id={'customFile'} \r\n                    />\r\n                  <label \r\n                      className={'custom-file-label'}\r\n                      htmlFor={'customFile'}\r\n                      >\r\n                        Pick Up Litter...\r\n                    </label>\r\n                </div>\r\n                <div className={\"form-group mt-1 mb-3\"}>\r\n                  <label htmlFor=\"exampleFormControlInput1\">Something About Litter</label>\r\n                  <input type={\"text\"} onChange={handleCaptionChange} value={caption} className={\"form-control\"} id={\"exampleFormControlInput1\"} placeholder={\"Worst\"} />\r\n                </div>\r\n                {\r\n                  imageLoaded?\r\n                      <div className={'litter-preview-container mt-3 mb-3 p-2'}>\r\n                        <img src={previewImage} alt={'litter-preview'} className={'LitterPreview'} />\r\n                      </div>\r\n                      :\r\n                      <></>\r\n                }\r\n                <div>\r\n                  <button type={'button'} onClick={handleDestroyLitter} className={'btn btn-danger mt-3 mb-3'} >\r\n                    {postingState}\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n    )\r\n  \r\n}\r\n\r\nexport default PostLitter;","import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React from 'react';\r\nimport {faUser} from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst ProfileImageIcon = () => \r\n            <div className={'profile-image-container d-flex justify-content-center align-items-center'}>\r\n                <FontAwesomeIcon icon={faUser} className={'profile-image-icon'} />\r\n            </div>\r\n\r\nexport default ProfileImageIcon;","/*\r\n  Component that shows \r\n  username, \r\n  useraddress, \r\n  litter balance, \r\n  NBT balance\r\n */\r\n\r\nimport React from 'react';\r\nimport ProfileImageIcon from './ProfileImageIcon';\r\n\r\nconst UserStats = ({userName, userAddress, totalLitters, nobelBalance}) => {\r\n\r\n    return (\r\n          <div className={'user-stats tc'}>\r\n              <ProfileImageIcon />\r\n              <UserName>\r\n                {userName}\r\n              </UserName>\r\n              <UserAddress>\r\n                {userAddress}\r\n              </UserAddress>\r\n              <Balance\r\n                  ch1={'Litters'}\r\n                  cd1={totalLitters}\r\n                  ch2={'NBTs'}\r\n                  cd2={nobelBalance}\r\n              />\r\n          </div>\r\n    )\r\n\r\n}\r\n\r\nexport default UserStats\r\n\r\nconst UserName = (props) => \r\n          <h3 className={'mt-4 mb-1'} style={{wordBreak: 'break-all'}} >\r\n              {props.children}\r\n          </h3>\r\n\r\nconst UserAddress = (props) => \r\n              <p className={'fs-14 pl-3 pr-3'} style={{wordBreak: 'break-all'}}>\r\n                {props.children}\r\n              </p>\r\n\r\nconst Balance = ({ch1, cd1, ch2, cd2}) => \r\n              <div className={'d-flex flex-wrap justify-content-around'}>\r\n                <h5 style={{wordBreak: 'break-all'}} >\r\n                {ch1} - {cd1}\r\n                </h5>\r\n                <h5 style={{wordBreak: 'break-all'}} >\r\n                {ch2} - {cd2}\r\n                </h5>\r\n              </div>","import {createContext} from 'react';\r\n\r\nconst defaultValue = {\r\n    userName: '',\r\n    userAddress: '0x00000000000000000000',\r\n    totalLitters: 0,\r\n    nobelBalance: 0\r\n}\r\nconst UserStatsContext = createContext(defaultValue);\r\n\r\nexport default UserStatsContext;","/*\r\n  Footer component to give details about repository\r\n*/\r\n\r\nimport React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst CLIENT = process.env.REACT_APP_REPOSITORY_URL;\r\nconst PROJECT = process.env.REACT_APP_PROJECT_REPOSITORY_URL;\r\n\r\n\r\nconst Footer = () => \r\n        <p className={'tc footer fixed-bottom'}>\r\n                Created with <FontAwesomeIcon icon={faHeart} className={'heart'} /> by Codebuster22.\r\n                <br/>\r\n                <a href={CLIENT} target=\"_blank\" rel=\"noopener noreferrer\">Link to Client Side Repo!</a>\r\n                <a href={PROJECT} target=\"_blank\" rel=\"noopener noreferrer\">Link to Full Project Repo!</a>\r\n        </p>\r\n\r\nexport default Footer;","/*\r\n    Hamburger Menu Content\r\n    Used to display user statistics \r\n    along with name.\r\n */\r\n\r\nimport React, {useContext} from 'react';\r\nimport {MenuContext} from 'react-flexible-sliding-menu';\r\nimport UserStats from './UserStats';\r\nimport UserStatsContext from '../UserStatsContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport Footer from './Footer';\r\n\r\nconst ProfileMenu = () => {\r\n\r\n    const {closeMenu} = useContext(MenuContext);\r\n    const {userName, currentAccount, litterBalance, nobelBalance} = useContext(UserStatsContext);\r\n\r\n    return (\r\n        <div className={'tl h-100'}>\r\n            <button className={'btn btn-lg'} onClick={closeMenu}>\r\n                <FontAwesomeIcon icon={faTimes} />\r\n            </button>\r\n            <UserStats\r\n                userName={userName}\r\n                userAddress={currentAccount} \r\n                totalLitters={litterBalance} \r\n                nobelBalance={nobelBalance} \r\n                />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileMenu","/*\r\n  Component to render and \r\n  show litters fetched from blockchain\r\n */\r\n\r\nimport React, {useState} from 'react';\r\n\r\nconst ViewLitters = ({litters, giftReward}) => {\r\n\r\n    const renderLitters = (litters) =>\r\n          litters.map(\r\n              litter => <LitterCard litter={litter} key={litter.tokenId} giftReward={giftReward} />\r\n            )\r\n  \r\n    return (\r\n            <div className={'col-12 col-md-6 pt-5 view-litters'} >\r\n              <h2>\r\n                Litters by the community\r\n              </h2>\r\n              <div className={'mt-5 mb-5 p-2'}>\r\n                  {renderLitters(litters)}\r\n              </div>\r\n            </div>\r\n    )\r\n  \r\n}\r\n\r\nexport default ViewLitters;\r\n  \r\n  const LitterCard = ({litter, giftReward}) => {\r\n  \r\n    const [isGifting, setIsGifting] = useState(false);\r\n  \r\n    const giveReward = async () => {\r\n      setIsGifting(true);\r\n      alert(`Are you sure you want to gift ${litter.creator}, 1 Nobel Token`);\r\n      const flag = await giftReward(litter.creator);\r\n      if(!flag){\r\n        alert(\"Sending Reward Failed\");\r\n        return;\r\n      }\r\n      alert(\"Sent\");\r\n      setIsGifting(false)\r\n    }\r\n  \r\n    return (\r\n            <div className={'w-100 d-flex justify-content-center'}>\r\n              <div className={\"card mt-2 mb-2\"} style={{width: '20rem'}}>\r\n                    <img src={`https://ipfs.infura.io/ipfs/${litter.tokenUri}`} className=\"card-img-top\" alt=\"...\" />\r\n                    <div className=\"card-body\">\r\n                      <h5 className=\"card-title\">{litter.creatorName}</h5>\r\n                      <p className=\"card-body\">{litter.caption}</p>\r\n                      <button type={'button'} className=\"btn btn-primary\" onClick={giveReward} >\r\n                        {\r\n                          isGifting?\r\n                            \"Sending....\"\r\n                            :\r\n                            \"Give 1 Nobel Token as Reward\"\r\n                        }\r\n                      </button>\r\n                    </div>\r\n              </div>\r\n            </div>\r\n    )\r\n  \r\n  \r\n  }","/*\r\nModal that pops out for new User \r\nor user who are not registered \r\nto help them register\r\n */\r\n\r\nimport React, {useState} from 'react';\r\nimport {Modal} from 'react-bootstrap';\r\n\r\nconst RegisterUserModal = ({show, onHide, register}) => {\r\n  \r\n    const [isRegistering, setIsRegistering] = useState(false);\r\n    const [userName, setUserName] = useState('')\r\n  \r\n    const registerUser = async () => {\r\n      setIsRegistering(true);\r\n      const flag = await register(userName);\r\n      if(flag){\r\n        alert('Success');\r\n        setIsRegistering(false);\r\n        onHide();\r\n      }else {\r\n        alert('Failed');\r\n        setIsRegistering(false);\r\n      }\r\n    }\r\n  \r\n    return (\r\n      <Modal\r\n        show={show}\r\n        onHide={onHide}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Register here!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h6>You are not registered, register here!</h6>\r\n          <div className={'form-group mt-4'}>\r\n            <label htmlFor={'usernameInput'}>\r\n              User Name\r\n            </label>\r\n            <input value={userName} onChange={(e)=>setUserName(e.target.value)} className={'form-control'} id={'usernameInput'} type={'text'} />\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <button className={'btn btn-primary'} onClick={registerUser}>\r\n            {\r\n              isRegistering?'Registering...':'Register'\r\n            }\r\n          </button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  export default RegisterUserModal;","/*\r\n  Top Nav Bar\r\n  Contains app name and \r\n  Button to access user stats\r\n */\r\n\r\nimport React, {useContext} from 'react';\r\nimport {MenuContext} from 'react-flexible-sliding-menu';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faBars} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst TopBar = () => {\r\n\r\n    const {toggleMenu} = useContext(MenuContext);\r\n    return (\r\n            <nav className={\"w-100 navbar navbar-light bg-light\"}>\r\n              <h5 className={\"navbar-brand\"}>Nobel Litterati</h5>\r\n              <button className={\"btn btn-lg\"} onClick={toggleMenu} type={\"button\"}>\r\n                <FontAwesomeIcon icon={faBars} />\r\n              </button>\r\n            </nav>\r\n    )\r\n\r\n}\r\n\r\nexport default TopBar;","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport OpenNFTContract from \"./contracts/OpenNFT.json\";\r\nimport NobelMainContract from \"./contracts/NobelMain.json\";\r\nimport NobelTokenContract from \"./contracts/NobelToken.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport MenuProvider from 'react-flexible-sliding-menu';\r\nimport ProfileMenu from './Components/ProfileMenu';\r\nimport ViewLitters from './Components/ViewLitters';\r\nimport PostLitter from './Components/PostLitter';\r\nimport RegisterUserModal from './Components/RegisterUserModal';\r\nimport TopBar from './Components/TopBar';\r\nimport UserStatsContext from './UserStatsContext';\r\n\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n  state = { isLoaded: false, litters: [], refresh: false, currentAccount: '0x00000000000000000000', isRegistered: false };\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      this.web3 = await getWeb3();\r\n      // this.web3 = await new Web3(\"https://rinkeby.infura.io/v3/ca2f217cd62c4f8081cbfa6f236b609a\");\r\n\r\n      this.gas = 3000000;\r\n      this.gasPrice = this.web3.utils.toWei('2','Gwei');\r\n      console.log(this.gasPrice);\r\n\r\n      // Use web3 to get the user's accounts.\r\n      this.accounts = await this.web3.eth.getAccounts();\r\n      setInterval(\r\n        async ()=>{\r\n          this.accounts = await this.web3.eth.getAccounts();\r\n          if(this.state.currentAccount !== this.accounts[0]){\r\n            await this.changeUser(this.accounts[0]);\r\n          }\r\n          this.fetchUserStats(this.accounts[0], this.state.isRegistered);\r\n        }, 1000\r\n      )\r\n\r\n      // Get the contract instance.\r\n      this.networkId = await this.web3.eth.net.getId();\r\n      console.log(this.networkId);\r\n\r\n      const OpenNFTNetwork = OpenNFTContract.networks[this.networkId];\r\n      this.OpenNFTInstance = new this.web3.eth.Contract(\r\n        OpenNFTContract.abi,\r\n        OpenNFTNetwork && OpenNFTNetwork.address,\r\n      );\r\n\r\n      const NodeMainNetwork = NobelMainContract.networks[this.networkId];\r\n      this.NodeMainInstance = new this.web3.eth.Contract(\r\n        NobelMainContract.abi,\r\n        NodeMainNetwork && NodeMainNetwork.address,\r\n      );\r\n\r\n      this.changeUser(this.accounts[0]);\r\n\r\n      this.fetchUserStats(this.accounts[0], this.state.isRegistered);\r\n\r\n      this.fetchTokenIds();\r\n\r\n      this.initialiseNobelTokenContract();\r\n\r\n      this.listenToNftCreation();\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      if(this.web3){\r\n        this.setState({ isLoaded: true, currentAccount: this.accounts[0]});\r\n      }\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  onHide = () => {\r\n    this.setState(\r\n      {show: false}\r\n    );\r\n  }\r\n\r\n  onShow = () => {\r\n    this.setState(\r\n      {show: true}\r\n    );\r\n  }\r\n\r\n  register = async (userName) => {\r\n    return await this.NodeMainInstance.methods.registerUser(userName).send(\r\n      {\r\n        from: this.state.currentAccount,\r\n        gas: this.gas,\r\n        gasPrice: this.gasPrice\r\n      }\r\n    ).on('receipt',(receipt)=>{\r\n      this.setState({\r\n        isRegistered: true\r\n      });\r\n      this.fetchUserStats(this.state.currentAccount)\r\n      return true\r\n    })\r\n    .on('error',(error)=>{\r\n      return false\r\n    })\r\n  }\r\n\r\n  changeUser = async (account) => {\r\n    const isRegistered = await this.NodeMainInstance\r\n                            .methods.isRegistered(account).call();\r\n    const newState = {\r\n      currentAccount: account,\r\n      isRegistered: isRegistered==0?false:true\r\n    }\r\n    newState.show = !newState.isRegistered?true:false;\r\n    this.setState(\r\n      {\r\n        ...newState\r\n      }\r\n    )\r\n  }\r\n\r\n  giftReward = async (creator) => {\r\n    const currentAccount = this.state.currentAccount;\r\n    const balance = await this.NobelTokenInstance.methods.balanceOf(this.state.currentAccount).call();\r\n    console.log(balance);\r\n    if(balance<1){\r\n      alert(\"Sorry, you don't have enough Nobel Token Balance. Earn Nobel tokens by destroying some Litter.\");\r\n      return;\r\n    }\r\n    return await this.NobelTokenInstance.methods.transfer(creator, 1).send({\r\n      from: currentAccount,\r\n      gas: this.gas,\r\n      gasPrice: this.gasPrice\r\n    }).on('receipt',(receipt)=>true)\r\n      .on('error', (error)=>false);\r\n  }\r\n\r\n  initialiseNobelTokenContract = async () => {\r\n    const NobelTokenAddress = await this.NodeMainInstance.methods.getNobelsContractAddress().call();\r\n    console.log({NobelTokenAddress});\r\n      this.NobelTokenInstance = new this.web3.eth.Contract(\r\n        NobelTokenContract.abi,\r\n        NobelTokenAddress\r\n      );\r\n  }\r\n\r\n  fetchTokenIds = async () => {\r\n    const litters = this.state.litters;\r\n    const CurrentTokenId = await this.OpenNFTInstance.methods.tokenId().call();\r\n    for(let i = 1; i<=CurrentTokenId; i++){\r\n      const tokenUri = await this.OpenNFTInstance.methods.getTokenUri(i).call();\r\n      const creator = await this.OpenNFTInstance.methods.getTokenCreator(i).call();\r\n      const caption = await this.OpenNFTInstance.methods.getTokenCaption(i).call();\r\n      const creatorName = await this.NodeMainInstance.methods.user_address_to_user_name(creator).call();\r\n      const tokenId = i;\r\n      litters.unshift({tokenUri, tokenId, creator, caption, creatorName });\r\n    };\r\n    this.setState({litters: litters});\r\n  }\r\n\r\n  listenToNftCreation = async () => {\r\n    this.OpenNFTInstance.events.NftTokenCreated()\r\n            .on('data',\r\n                  async (receipt)=>{\r\n                    const {creator, tokenId, tokenUri, caption} = receipt.returnValues;\r\n                    const creatorName = await this.NodeMainInstance.methods.user_address_to_user_name(creator).call();\r\n                    const litter = {creator, tokenId, tokenUri, caption, creatorName};\r\n                    const litters = this.state.litters;\r\n                    litters.unshift(litter);\r\n                    this.setState({litters: litters});\r\n                  }\r\n              )\r\n  }\r\n\r\n  fetchUserStats = async (account, isRegistered) => {\r\n    if(isRegistered){\r\n      const userName = await this.NodeMainInstance\r\n                            .methods.user_address_to_user_name(account).call();\r\n      const litterBalance = await this.NodeMainInstance\r\n                            .methods.getBalanceOfLitter(account).call();\r\n      const nobelBalance = await this.NodeMainInstance\r\n                            .methods.getBalanceOfNobels(account).call();\r\n      this.setState({\r\n        userName: userName,\r\n        litterBalance: litterBalance,\r\n        nobelBalance: nobelBalance\r\n      });\r\n    }\r\n  }\r\n\r\n  postLitterOnContract = async (uri, caption) => {\r\n    const currentAccount = this.state.currentAccount;\r\n    const response = await this.NodeMainInstance.methods\r\n                  .createNobelLitter(uri, caption).send({\r\n                    from: currentAccount,\r\n                    gas: this.gas,\r\n                    gasPrice: this.gasPrice\r\n                  }).on('error',(error)=>{\r\n                              alert(\"Litter Already Exists\"); \r\n                              return false;\r\n                            });\r\n    console.log(response);\r\n    await this.fetchUserStats(this.state.currentAccount);\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    if (!this.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n    const userStats = {\r\n      userName: this.state.userName,\r\n      currentAccount: this.state.currentAccount, \r\n      litterBalance: this.state.litterBalance, \r\n      nobelBalance: this.state.nobelBalance\r\n    }\r\n    return (\r\n      <div className=\"App container\">\r\n        <UserStatsContext.Provider value={userStats} >\r\n          <MenuProvider \r\n                      MenuComponent={ProfileMenu} \r\n                      direction={'right'} \r\n                      width={'300px'} >\r\n            <div className={'row'}>\r\n              <TopBar />\r\n            </div>\r\n            <div className={'row'}>\r\n              <PostLitter postLitterOnContract={this.postLitterOnContract} />\r\n              <ViewLitters litters={this.state.litters} giftReward={this.giftReward} />\r\n            </div>\r\n          </MenuProvider> \r\n        </UserStatsContext.Provider>\r\n        <RegisterUserModal show={this.state.show} onHide={this.onHide} register={this.register} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}